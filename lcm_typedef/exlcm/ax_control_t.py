"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ax_control_t(object):
    __slots__ = ["source", "wipers", "ptt", "horn", "headlight", "sig_l", "sig_r", "hazard"]

    def __init__(self):
        self.source = ""
        self.wipers = False
        self.ptt = False
        self.horn = False
        self.headlight = False
        self.sig_l = False
        self.sig_r = False
        self.hazard = False

    def encode(self):
        buf = BytesIO()
        buf.write(ax_control_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __source_encoded = self.source.encode('utf-8')
        buf.write(struct.pack('>I', len(__source_encoded)+1))
        buf.write(__source_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbbbbb", self.wipers, self.ptt, self.horn, self.headlight, self.sig_l, self.sig_r, self.hazard))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ax_control_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ax_control_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ax_control_t()
        __source_len = struct.unpack('>I', buf.read(4))[0]
        self.source = buf.read(__source_len)[:-1].decode('utf-8', 'replace')
        self.wipers = bool(struct.unpack('b', buf.read(1))[0])
        self.ptt = bool(struct.unpack('b', buf.read(1))[0])
        self.horn = bool(struct.unpack('b', buf.read(1))[0])
        self.headlight = bool(struct.unpack('b', buf.read(1))[0])
        self.sig_l = bool(struct.unpack('b', buf.read(1))[0])
        self.sig_r = bool(struct.unpack('b', buf.read(1))[0])
        self.hazard = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ax_control_t in parents: return 0
        tmphash = (0xa15a031c8aa74eb4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ax_control_t._packed_fingerprint is None:
            ax_control_t._packed_fingerprint = struct.pack(">Q", ax_control_t._get_hash_recursive([]))
        return ax_control_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

